# .github/workflows/audio-test.yml
name: Audio Testing Suite

# Trigger on relevant events
on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.js'
      - '**/*.py'
      - '**/audio/**'
      - '.github/workflows/audio-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.js'
      - '**/*.py'
      - '**/audio/**'
  workflow_dispatch:  # Manual trigger option

# Environment variables
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20.x'
  AUDIO_TEST_TIMEOUT: '300000'  # 5 minutes in milliseconds

jobs:
  audio-validation:
    name: Audio System Validation
    runs-on: ubuntu-latest
    
    # Service containers for audio processing
    services:
      audio-server:
        image: audio-test-server:latest
        ports:
          - 8080:8080
        options: --health-cmd "curl -f http://localhost:8080/health" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for audio change detection

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Audio Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pulseaudio \
            alsa-utils \
            ffmpeg \
            portaudio19-dev
        continue-on-error: false

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          pip install pytest-xvfb pytest-timeout pytest-audio

      - name: Install Node.js Dependencies
        run: |
          npm ci
          npm install -g audio-tester web-audio-test-api

      - name: Verify Audio System Configuration
        run: |
          pulseaudio --check
          aplay -l
          python -c "import sounddevice; print(sounddevice.query_devices())"
        continue-on-error: false

      - name: Run Audio Unit Tests
        run: |
          pytest tests/audio/ \
            --timeout=${{ env.AUDIO_TEST_TIMEOUT }} \
            --junitxml=test-results/audio-unit.xml
        env:
          AUDIO_TEST_MODE: 'CI'
          PYTHONPATH: ${{ github.workspace }}

      - name: Run Audio E2E Tests
        run: |
          python tests/e2e/test_39fdbcf5-ee21-45cf-9fda-4554d138be63_complete.py \
            --ci-mode \
            --audio-validation
        timeout-minutes: 10

      - name: Run Audio Performance Benchmarks
        run: |
          python tests/performance/benchmark_39fdbcf5-ee21-45cf-9fda-4554d138be63.py \
            --audio-only \
            --export-json
        if: github.event_name == 'push'

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: audio-test-results
          path: |
            test-results/
            audio-benchmarks/
          retention-days: 14

      - name: Report Test Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.runId;
            const conclusion = "${{ job.status }}";
            
            await github.rest.checks.create({
              owner,
              repo,
              name: 'Audio Validation Suite',
              head_sha: context.sha,
              status: 'completed',
              conclusion: conclusion.toLowerCase(),
              output: {
                title: 'Audio Test Results',
                summary: `Audio validation suite completed with status: ${conclusion}`
              }
            });

  notify:
    needs: audio-validation
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Team
        uses: actions/github-script@v6
        with:
          script: |
            const outcome = "${{ needs.audio-validation.result }}";
            const message = `Audio Test Suite: ${outcome}`;
            console.log(message);
            // Add your notification logic here (e.g., Slack, Discord, etc.)